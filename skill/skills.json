{"mineWoodLog": {"code": "async function mineWoodLog(bot) {\n  // Find a nearby wood log\n  const log = bot.findBlock({\n    matching: block => {\n      return block.name === \"oak_log\" || block.name === \"birch_log\" || block.name === \"spruce_log\" || block.name === \"jungle_log\" || block.name === \"acacia_log\" || block.name === \"dark_oak_log\" || block.name === \"mangrove_log\";\n    },\n    maxDistance: 32\n  });\n  if (!log) {\n    // If no log is found, explore until a log is found\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const log = bot.findBlock({\n        matching: block => {\n          return block.name === \"oak_log\" || block.name === \"birch_log\" || block.name === \"spruce_log\" || block.name === \"jungle_log\" || block.name === \"acacia_log\" || block.name === \"dark_oak_log\" || block.name === \"mangrove_log\";\n        },\n        maxDistance: 32\n      });\n      return log;\n    });\n  }\n\n  // Mine the wood log\n  await mineBlock(bot, log.name, 1);\n}", "description": "async function mineWoodLog(bot) {\n    // The function is about mining a wood log. It first finds a nearby wood log within a certain distance. If no log is found, it explores the environment until a log is found. Once a log is found, it mines the log.\n}"}, "obtainDarkOakLogs": {"code": "async function obtainDarkOakLogs(bot) {\n  const requiredLogs = 4;\n  const currentLogs = bot.inventory.count(mcData.itemsByName.dark_oak_log.id);\n  if (currentLogs >= requiredLogs) {\n    bot.chat(\"Already have enough dark oak logs.\");\n    return;\n  }\n  const logsToMine = requiredLogs - currentLogs;\n  bot.chat(`Need to mine ${logsToMine} more dark oak logs.`);\n  await mineBlock(bot, \"dark_oak_log\", logsToMine);\n  bot.chat(\"Obtained 4 dark oak logs.\");\n}", "description": "async function obtainDarkOakLogs(bot) {\n    // The function is about obtaining 4 dark oak logs. It checks if there are already 4 dark oak logs in the inventory, and if so, it returns. If not, it calculates how many more logs need to be mined, mines the required number of dark oak logs, and then announces that 4 dark oak logs have been obtained.\n}"}, "craftWoodenPlanks": {"code": "async function craftWoodenPlanks(bot) {\n  const requiredLogs = 1;\n  const currentLogs = bot.inventory.count(mcData.itemsByName.dark_oak_log.id);\n  if (currentLogs >= requiredLogs) {\n    bot.chat(\"Already have enough dark oak logs.\");\n    await craftItem(bot, \"dark_oak_planks\", 1);\n    bot.chat(\"Crafted 4 wooden planks.\");\n  } else {\n    bot.chat(\"Not enough dark oak logs to craft wooden planks.\");\n  }\n}", "description": "async function craftWoodenPlanks(bot) {\n    // The function crafts 4 wooden planks using 1 dark oak log. It checks if there is at least 1 dark oak log in the inventory. If there is, it crafts the wooden planks and saves the event. If there isn't, it sends a message saying there are not enough logs to craft wooden planks.\n}"}, "craftWoodenPickaxe": {"code": "async function craftWoodenPickaxe(bot) {\n  const requiredPlanks = 3;\n  const requiredSticks = 2;\n  const currentPlanks = bot.inventory.count(mcData.itemsByName.dark_oak_planks.id);\n  const currentSticks = bot.inventory.count(mcData.itemsByName.stick.id);\n  if (currentPlanks < requiredPlanks) {\n    const logsNeeded = Math.ceil((requiredPlanks - currentPlanks) / 4);\n    await mineBlock(bot, \"dark_oak_log\", logsNeeded);\n    await craftItem(bot, \"dark_oak_planks\", logsNeeded);\n  }\n  if (currentSticks < requiredSticks) {\n    const planksNeeded = Math.ceil((requiredSticks - currentSticks) / 4);\n    await craftItem(bot, \"stick\", planksNeeded);\n  }\n  const craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n  if (!craftingTable) {\n    await mineBlock(bot, \"dark_oak_log\", 1);\n    await craftItem(bot, \"crafting_table\", 1);\n  }\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  await craftItem(bot, \"wooden_pickaxe\", 1);\n  bot.chat(\"Crafted a wooden pickaxe.\");\n}", "description": "async function craftWoodenPickaxe(bot) {\n    // The function crafts a wooden pickaxe by checking the inventory for required materials, and crafting them if they are not available. If a crafting table is not in the inventory, it is crafted and placed. Finally, a wooden pickaxe is crafted and the bot chats that it has been crafted.\n}"}, "mineCobblestone": {"code": "async function mineCobblestone(bot) {\n  // Check if the bot has a wooden_pickaxe in the inventory\n  const woodenPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_pickaxe.id);\n\n  // If not, call the craftWoodenPickaxe function to craft a wooden pickaxe\n  if (!woodenPickaxe) {\n    await craftWoodenPickaxe(bot);\n  }\n\n  // Equip the wooden_pickaxe\n  await bot.equip(mcData.itemsByName.wooden_pickaxe.id, \"hand\");\n\n  // Mine 10 cobblestone\n  await mineBlock(bot, \"stone\", 10);\n  bot.chat(\"Mined 10 cobblestone.\");\n}", "description": "async function mineCobblestone(bot) {\n    // The function is about mining 10 cobblestones using a wooden pickaxe. First check if a wooden pickaxe is in the inventory. If not, craft one. Equip the wooden pickaxe in the hand and mine 10 cobblestone blocks using the wooden pickaxe.\n}"}, "craftStonePickaxe": {"code": "async function craftStonePickaxe(bot) {\n  // Check if the bot has a crafting table in the inventory\n  const craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n\n  // If not, craft one\n  if (!craftingTable) {\n    await mineBlock(bot, \"dark_oak_log\", 1);\n    await craftItem(bot, \"dark_oak_planks\", 1);\n    await craftItem(bot, \"crafting_table\", 1);\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a stone pickaxe using the crafting table\n  await craftItem(bot, \"stone_pickaxe\", 1);\n  bot.chat(\"Crafted a stone pickaxe.\");\n}", "description": "async function craftStonePickaxe(bot) {\n    // The function crafts a stone pickaxe using a crafting table. If the bot does not have a crafting table in the inventory, it mines a dark oak log and crafts a crafting table. Then, it places the crafting table near the bot and crafts a stone pickaxe using the crafting table. Finally, it sends a chat message indicating that a stone pickaxe has been crafted.\n}"}, "mineCoalOres": {"code": "async function mineCoalOres(bot) {\n  // Check if the bot has a stone_pickaxe in the inventory\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n\n  // If not, call the craftStonePickaxe function to craft a stone pickaxe\n  if (!stonePickaxe) {\n    await craftStonePickaxe(bot);\n  }\n\n  // Equip the stone_pickaxe\n  await bot.equip(mcData.itemsByName.stone_pickaxe.id, \"hand\");\n\n  // Explore until finding a coal_ore\n  await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const coal_ore = bot.findBlock({\n      matching: mcData.blocksByName[\"coal_ore\"].id,\n      maxDistance: 32\n    });\n    return coal_ore;\n  });\n\n  // Mine 5 coal ores\n  await mineBlock(bot, \"coal_ore\", 5);\n  bot.chat(\"Mined 5 coal ores.\");\n}", "description": "async function mineCoalOres(bot) {\n    // The function is about mining 5 coal ores using a stone pickaxe. First, check if the bot has a stone pickaxe in the inventory. If not, call the `craftStonePickaxe` function to craft one. Then, equip the stone pickaxe in the hand. Next, explore the environment until finding a coal ore block. Once a coal ore block is found, mine a total of 5 coal ores using the stone pickaxe. Finally, the bot will chat that it has mined 5 coal ores.\n}"}, "mineAdditionalCoalOres": {"code": "async function mineAdditionalCoalOres(bot) {\n  // Equip the stone_pickaxe\n  await bot.equip(mcData.itemsByName.stone_pickaxe.id, \"hand\");\n\n  // Explore until finding a coal_ore\n  await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const coal_ore = bot.findBlock({\n      matching: mcData.blocksByName[\"coal_ore\"].id,\n      maxDistance: 32\n    });\n    return coal_ore;\n  });\n\n  // Mine 5 coal ores\n  await mineBlock(bot, \"coal_ore\", 5);\n  bot.chat(\"Mined 5 additional coal ores.\");\n}", "description": "async function mineAdditionalCoalOres(bot) {\n    // The function is about mining 5 coal ores using a stone pickaxe. First, equip the stone pickaxe in the hand. Next, explore the environment until finding a coal ore block. Once a coal ore block is found, mine a total of 5 coal ores using the stone pickaxe. Finally, a message is sent to the chat indicating that 5 additional coal ores have been mined.\n}"}, "craftFurnace": {"code": "async function craftFurnace(bot) {\n  // Check if the bot has a crafting table in the inventory\n  const craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n\n  // If not, mine a dark_oak_log, craft dark_oak_planks, and then craft a crafting table\n  if (!craftingTable) {\n    await mineBlock(bot, \"dark_oak_log\", 1);\n    await craftItem(bot, \"dark_oak_planks\", 1);\n    await craftItem(bot, \"crafting_table\", 1);\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Check if the bot has enough cobblestone in the inventory\n  const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n\n  // If not, mine more cobblestone until there are at least 8 cobblestones in the inventory\n  if (cobblestoneCount < 8) {\n    await mineBlock(bot, \"stone\", 8 - cobblestoneCount);\n    bot.chat(\"Mined enough cobblestone to craft a furnace.\");\n  }\n\n  // Craft a furnace using the crafting table\n  await craftItem(bot, \"furnace\", 1);\n  bot.chat(\"Crafted a furnace.\");\n}", "description": "async function craftFurnace(bot) {\n    // The function is about crafting a furnace. If the bot does not have a crafting table in the inventory, it will mine a dark oak log, craft dark oak planks, and then craft a crafting table. After placing the crafting table near the bot, it will check if there is enough cobblestone in the inventory. If not, it will mine more cobblestone until there are at least 8 cobblestones in the inventory. Finally, it will craft a furnace using the crafting table.\n}"}, "checkTaskCompletion": {"code": "async function checkTaskCompletion(bot) {\n  bot.chat(\"Task already completed. 10 coal ores have been mined.\");\n}", "description": "async function checkTaskCompletion(bot) {\n    // The function simply sends a chat message indicating that the task has already been completed, which is mining 10 coal ores.\n}"}, "killAnimalForFood": {"code": "async function killAnimalForFood(bot) {\n  // Equip the stone_pickaxe\n  await bot.equip(mcData.itemsByName.stone_pickaxe.id, \"hand\");\n\n  // Explore until finding an animal (cow, pig, chicken, or sheep)\n  const animal = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const animal = bot.nearestEntity(entity => {\n      return [\"cow\", \"pig\", \"chicken\", \"sheep\"].includes(entity.name) && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    return animal;\n  });\n\n  // Kill the animal using the killMob function\n  await killMob(bot, animal.name, 300);\n\n  // Collect the dropped item (meat)\n  await bot.pathfinder.goto(new GoalBlock(animal.position.x, animal.position.y, animal.position.z));\n  bot.chat(\"Killed an animal for food.\");\n}", "description": "async function killAnimalForFood(bot) {\n    // The function is about killing an animal (cow, pig, chicken, or sheep) for food. It equips a stone pickaxe and explores the environment until finding an animal within 32 blocks. Once an animal is found, it kills the animal using the `killMob` function and collects the dropped item (meat). Finally, it moves to the location of the animal and sends a chat message indicating that an animal has been killed for food.\n}"}, "craftTorches": {"code": "async function craftTorches(bot) {\n  // Check if the bot has a crafting table in the inventory\n  const craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n\n  // If not, mine a dark_oak_log, craft dark_oak_planks, and then craft a crafting table\n  if (!craftingTable) {\n    await mineBlock(bot, \"dark_oak_log\", 1);\n    await craftItem(bot, \"dark_oak_planks\", 1);\n    await craftItem(bot, \"crafting_table\", 1);\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Check if the bot has enough sticks and coal in the inventory\n  const requiredSticks = 1;\n  const requiredCoal = 1;\n  const currentSticks = bot.inventory.count(mcData.itemsByName.stick.id);\n  const currentCoal = bot.inventory.count(mcData.itemsByName.coal.id);\n\n  // If not, mine dark_oak_log and craft dark_oak_planks, then craft sticks\n  if (currentSticks < requiredSticks) {\n    const logsNeeded = Math.ceil((requiredSticks - currentSticks) / 4);\n    await mineBlock(bot, \"dark_oak_log\", logsNeeded);\n    await craftItem(bot, \"dark_oak_planks\", logsNeeded);\n    await craftItem(bot, \"stick\", logsNeeded);\n  }\n\n  // If not, mine coal_ore to collect coal\n  if (currentCoal < requiredCoal) {\n    await mineBlock(bot, \"coal_ore\", requiredCoal - currentCoal);\n  }\n\n  // Craft 4 torches using the crafting table\n  await craftItem(bot, \"torch\", 1);\n  bot.chat(\"Crafted 4 torches.\");\n}", "description": "async function craftTorches(bot) {\n    // The function is about crafting torches using a crafting table. If the bot does not have a crafting table in the inventory, it will mine a dark oak log, craft dark oak planks, and then craft a crafting table. After placing the crafting table near the bot, it will check if there are enough sticks and coal in the inventory. If not, it will mine dark oak logs and coal ore to collect the required materials. Finally, it will craft 4 torches using the crafting table.\n}"}, "craftWoodenSword": {"code": "async function craftWoodenSword(bot) {\n  // Check if the bot has a crafting table in the inventory\n  const craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n\n  // If not, mine a dark_oak_log, craft dark_oak_planks, and then craft a crafting table\n  if (!craftingTable) {\n    await mineBlock(bot, \"dark_oak_log\", 1);\n    await craftItem(bot, \"dark_oak_planks\", 1);\n    await craftItem(bot, \"crafting_table\", 1);\n  }\n\n  // Use exploreUntil to find a suitable block to place the crafting table on\n  const suitableBlock = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const offsets = [new Vec3(1, 0, 0), new Vec3(-1, 0, 0), new Vec3(0, 0, 1), new Vec3(0, 0, -1)];\n    for (const offset of offsets) {\n      const block = bot.blockAt(bot.entity.position.plus(offset));\n      if (block && block.name !== \"air\" && block.name !== \"grass\") {\n        return block;\n      }\n    }\n    return null;\n  });\n\n  // Place the crafting table on the suitable block\n  await placeItem(bot, \"crafting_table\", suitableBlock.position.offset(0, 1, 0));\n\n  // Check if the bot has enough dark_oak_planks and sticks in the inventory\n  const requiredPlanks = 2;\n  const requiredSticks = 1;\n  const currentPlanks = bot.inventory.count(mcData.itemsByName.dark_oak_planks.id);\n  const currentSticks = bot.inventory.count(mcData.itemsByName.stick.id);\n\n  // If not, mine dark_oak_log and craft dark_oak_planks, then craft sticks\n  if (currentPlanks < requiredPlanks) {\n    const logsNeeded = Math.ceil((requiredPlanks - currentPlanks) / 4);\n    await mineBlock(bot, \"dark_oak_log\", logsNeeded);\n    await craftItem(bot, \"dark_oak_planks\", logsNeeded);\n  }\n  if (currentSticks < requiredSticks) {\n    const planksNeeded = Math.ceil((requiredSticks - currentSticks) / 4);\n    await craftItem(bot, \"stick\", planksNeeded);\n  }\n\n  // Craft a wooden sword using the crafting table\n  await craftItem(bot, \"wooden_sword\", 1);\n  bot.chat(\"Crafted a wooden sword.\");\n}", "description": "async function craftWoodenSword(bot) {\n    // The function crafts a wooden sword using a crafting table. If the bot does not have a crafting table in the inventory, it mines a dark oak log, crafts dark oak planks, and then crafts a crafting table. It then finds a suitable block to place the crafting table on and places it. The function checks if the bot has enough dark oak planks and sticks in the inventory. If not, it mines dark oak logs and crafts dark oak planks, then crafts sticks. Finally, it crafts a wooden sword using the crafting table.\n}"}, "cookBeefInFurnace": {"code": "async function cookBeefInFurnace(bot) {\n  // Find a suitable block to place the furnace on\n  const suitableBlock = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const offsets = [new Vec3(1, 0, 0), new Vec3(-1, 0, 0), new Vec3(0, 0, 1), new Vec3(0, 0, -1)];\n    for (const offset of offsets) {\n      const block = bot.blockAt(bot.entity.position.plus(offset));\n      if (block && block.name !== \"air\" && block.name !== \"grass\") {\n        return block;\n      }\n    }\n    return null;\n  });\n\n  // Place the furnace on the suitable block\n  await placeItem(bot, \"furnace\", suitableBlock.position.offset(0, 1, 0));\n\n  // Cook the 3 beef in the furnace using coal as fuel\n  await smeltItem(bot, \"beef\", \"coal\", 3);\n  bot.chat(\"Cooked 3 beef in the furnace.\");\n}", "description": "async function cookBeefInFurnace(bot) {\n    // The function is about cooking 3 beef in a furnace using coal as fuel. First, it explores the environment to find a suitable block to place the furnace on. Once a suitable block is found, it places the furnace on top of it. Then, it cooks the beef in the furnace using coal as fuel. Finally, it sends a chat message indicating that 3 beef have been cooked in the furnace.\n}"}, "mineIronOres": {"code": "async function mineIronOres(bot) {\n  // Equip the stone_pickaxe\n  await bot.equip(mcData.itemsByName.stone_pickaxe.id, \"hand\");\n\n  // Explore until finding an iron_ore\n  await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const iron_ore = bot.findBlock({\n      matching: mcData.blocksByName[\"iron_ore\"].id,\n      maxDistance: 32\n    });\n    return iron_ore;\n  });\n\n  // Mine 5 iron ores\n  await mineBlock(bot, \"iron_ore\", 5);\n  bot.chat(\"Mined 5 iron ores.\");\n}", "description": "async function mineIronOres(bot) {\n    // The function is about mining 5 iron ores using a stone pickaxe. The function equips the stone pickaxe in the hand and explores the environment until finding an iron ore block. Once an iron ore block is found, the function mines a total of 5 iron ores using the stone pickaxe and sends a chat message indicating the successful mining.\n}"}, "smeltRawIron": {"code": "async function smeltRawIron(bot) {\n  // Find a suitable block to place the furnace on\n  const suitableBlock = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const offsets = [new Vec3(1, 0, 0), new Vec3(-1, 0, 0), new Vec3(0, 0, 1), new Vec3(0, 0, -1)];\n    for (const offset of offsets) {\n      const block = bot.blockAt(bot.entity.position.plus(offset));\n      if (block && block.name !== \"air\" && block.name !== \"grass\") {\n        return block;\n      }\n    }\n    return null;\n  });\n\n  // Place the furnace on the suitable block\n  await placeItem(bot, \"furnace\", suitableBlock.position.offset(0, 1, 0));\n\n  // Smelt the 16 iron ores in the furnace using coal as fuel\n  await smeltItem(bot, \"iron_ore\", \"coal\", 16);\n  bot.chat(\"Smelted 16 iron ores in the furnace.\");\n}", "description": "async function smeltRawIron(bot) {\n    // The function is about smelting 16 iron ores in a furnace using coal as fuel. First, it finds a suitable block to place the furnace on by exploring the environment. Once a suitable block is found, it places the furnace on top of it. Then, it smelts the iron ores in the furnace using coal as fuel. Finally, it sends a chat message indicating that 16 iron ores have been smelted in the furnace.\n}"}, "craftIronPickaxe": {"code": "async function craftIronPickaxe(bot) {\n  // Check if the bot has a crafting table in the inventory\n  const craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n\n  // If not, mine a dark_oak_log, craft dark_oak_planks, and then craft a crafting table\n  if (!craftingTable) {\n    await mineBlock(bot, \"dark_oak_log\", 1);\n    await craftItem(bot, \"dark_oak_planks\", 1);\n    await craftItem(bot, \"crafting_table\", 1);\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft an iron pickaxe using the crafting table\n  await craftItem(bot, \"iron_pickaxe\", 1);\n  bot.chat(\"Crafted an iron pickaxe.\");\n}", "description": "async function craftIronPickaxe(bot) {\n    // The function crafts an iron pickaxe using a crafting table. If the bot does not have a crafting table in the inventory, it mines a dark oak log, crafts dark oak planks, and then crafts a crafting table. After placing the crafting table near the bot, it crafts an iron pickaxe using the crafting table.\n}"}, "craftStoneSword": {"code": "async function craftStoneSword(bot) {\n  // Check if we have enough cobblestone and sticks in the inventory\n  const requiredCobblestone = 2;\n  const requiredSticks = 1;\n  const currentCobblestone = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n  const currentSticks = bot.inventory.count(mcData.itemsByName.stick.id);\n\n  // If not, mine cobblestone and craft sticks as needed\n  if (currentCobblestone < requiredCobblestone) {\n    await mineBlock(bot, \"stone\", requiredCobblestone - currentCobblestone);\n  }\n  if (currentSticks < requiredSticks) {\n    const planksNeeded = Math.ceil((requiredSticks - currentSticks) / 4);\n    await mineBlock(bot, \"dark_oak_log\", planksNeeded);\n    await craftItem(bot, \"dark_oak_planks\", planksNeeded);\n    await craftItem(bot, \"stick\", planksNeeded);\n  }\n\n  // Check if we have a crafting table in the inventory\n  const craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n\n  // If not, craft one\n  if (!craftingTable) {\n    await mineBlock(bot, \"dark_oak_log\", 1);\n    await craftItem(bot, \"dark_oak_planks\", 1);\n    await craftItem(bot, \"crafting_table\", 1);\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a stone sword using the crafting table\n  await craftItem(bot, \"stone_sword\", 1);\n  bot.chat(\"Crafted a stone sword.\");\n}", "description": "async function craftStoneSword(bot) {\n    // The function crafts a stone sword using cobblestone and sticks. It checks if there is enough cobblestone and sticks in the inventory, and if not, it mines cobblestone and crafts sticks as needed. If there is no crafting table in the inventory, it crafts one. Then, it places the crafting table near the bot and crafts a stone sword using the crafting table. Finally, it sends a chat message indicating that a stone sword has been crafted.\n}"}, "craftIronSword": {"code": "async function craftIronSword(bot) {\n  // Check if we have enough iron ingots and sticks in the inventory\n  const requiredIronIngots = 2;\n  const requiredSticks = 1;\n  const currentIronIngots = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const currentSticks = bot.inventory.count(mcData.itemsByName.stick.id);\n\n  // If not, mine iron ore and smelt it into iron ingots, and craft sticks as needed\n  if (currentIronIngots < requiredIronIngots) {\n    const ironOre = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n      const iron_ore = bot.findBlock({\n        matching: mcData.blocksByName[\"iron_ore\"].id,\n        maxDistance: 32\n      });\n      return iron_ore;\n    });\n    await mineBlock(bot, \"iron_ore\", requiredIronIngots - currentIronIngots);\n    await smeltItem(bot, \"iron_ore\", \"coal\", requiredIronIngots - currentIronIngots);\n  }\n  if (currentSticks < requiredSticks) {\n    const planksNeeded = Math.ceil((requiredSticks - currentSticks) / 4);\n    await mineBlock(bot, \"dark_oak_log\", planksNeeded);\n    await craftItem(bot, \"dark_oak_planks\", planksNeeded);\n    await craftItem(bot, \"stick\", planksNeeded);\n  }\n\n  // Check if we have a crafting table in the inventory\n  const craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n\n  // If not, craft one\n  if (!craftingTable) {\n    await mineBlock(bot, \"dark_oak_log\", 1);\n    await craftItem(bot, \"dark_oak_planks\", 1);\n    await craftItem(bot, \"crafting_table\", 1);\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft an iron sword using the crafting table\n  await craftItem(bot, \"iron_sword\", 1);\n  bot.chat(\"Crafted an iron sword.\");\n}", "description": "async function craftIronSword(bot) {\n    // The function crafts an iron sword using a crafting table and materials in the inventory. If there are not enough iron ingots or sticks, it mines iron ore and smelts it into iron ingots, and crafts sticks as needed. If there is no crafting table in the inventory, it crafts one. It then places the crafting table near the bot and crafts an iron sword using the crafting table.\n}"}, "craftShield": {"code": "async function craftShield(bot) {\n  // Mine 2 dark_oak_logs to get enough planks\n  await mineBlock(bot, \"dark_oak_log\", 2);\n\n  // Craft 5 dark_oak_planks from the dark_oak_logs\n  await craftItem(bot, \"dark_oak_planks\", 2);\n\n  // Check if there's a crafting table in the inventory, if not, craft one\n  const craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n  if (!craftingTable) {\n    await mineBlock(bot, \"dark_oak_log\", 1);\n    await craftItem(bot, \"dark_oak_planks\", 1);\n    await craftItem(bot, \"crafting_table\", 1);\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a shield using the crafting table\n  await craftItem(bot, \"shield\", 1);\n  bot.chat(\"Crafted a shield.\");\n}", "description": "async function craftShield(bot) {\n    // The function crafts a shield by first mining 2 dark oak logs to get enough planks, then crafting 5 dark oak planks from the logs. It checks if there's a crafting table in the inventory, if not, it crafts one. The function then places the crafting table near the bot and crafts a shield using the crafting table. Finally, it sends a chat message indicating that a shield has been crafted.\n}"}, "equipShield": {"code": "async function equipShield(bot) {\n  // Find the shield in the bot's inventory\n  const shield = bot.inventory.findInventoryItem(mcData.itemsByName.shield.id);\n\n  // Equip the shield in the off-hand slot\n  await bot.equip(shield, \"off-hand\");\n  bot.chat(\"Equipped the shield.\");\n}", "description": "async function equipShield(bot) {\n    // The function is about equipping a shield in the off-hand slot of the bot's inventory. It first finds the shield in the bot's inventory and then equips it in the off-hand slot. Finally, it sends a chat message indicating that the shield has been equipped.\n}"}, "craftItemFrame": {"code": "async function craftItemFrame(bot) {\n  // Calculate the number of sticks needed to craft the item frame\n  const requiredSticks = 8;\n\n  // Check if we have enough dark_oak_logs in the inventory to craft the required sticks\n  const requiredLogs = Math.ceil((requiredSticks - bot.inventory.count(mcData.itemsByName.stick.id)) / 4);\n  const currentLogs = bot.inventory.count(mcData.itemsByName.dark_oak_log.id);\n\n  // If not, mine dark_oak_logs to get enough logs to craft the required sticks\n  if (currentLogs < requiredLogs) {\n    await mineBlock(bot, \"dark_oak_log\", requiredLogs - currentLogs);\n  }\n\n  // Craft dark_oak_planks from the dark_oak_logs\n  await craftItem(bot, \"dark_oak_planks\", requiredLogs);\n\n  // Craft the required sticks from the dark_oak_planks\n  await craftItem(bot, \"stick\", requiredLogs);\n\n  // Check if we have a crafting table in the inventory\n  const craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n\n  // If not, craft a crafting table\n  if (!craftingTable) {\n    await mineBlock(bot, \"dark_oak_log\", 1);\n    await craftItem(bot, \"dark_oak_planks\", 1);\n    await craftItem(bot, \"crafting_table\", 1);\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft the item frame using the crafting table\n  await craftItem(bot, \"item_frame\", 1);\n  bot.chat(\"Crafted an item frame.\");\n}", "description": "async function craftItemFrame(bot) {\n    // The function crafts an item frame using a crafting table. It first calculates the number of sticks needed to craft the item frame and checks if there are enough dark oak logs in the inventory to craft the required sticks. If not, it mines the logs to get enough. Then it crafts the required sticks and checks if there is a crafting table in the inventory. If not, it crafts one. It places the crafting table near the bot and crafts the item frame using the crafting table. Finally, it sends a chat message indicating that an item frame has been crafted.\n}"}, "killOneChicken": {"code": "async function killOneChicken(bot) {\n  // Equip the stone_sword\n  const stoneSword = bot.inventory.findInventoryItem(mcData.itemsByName.stone_sword.id);\n  await bot.equip(stoneSword, \"hand\");\n\n  // Find the nearest chicken using exploreUntil\n  const chicken = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const chicken = bot.nearestEntity(entity => {\n      return entity.name === \"chicken\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    return chicken;\n  });\n\n  // Kill the chicken using killMob function\n  await killMob(bot, chicken.name, 300);\n  bot.chat(\"Killed 1 chicken.\");\n}", "description": "async function killOneChicken(bot) {\n    // The function is about killing one chicken using a stone sword. First, equip the stone sword in the hand. Next, explore the environment until finding the nearest chicken within 32 blocks. Once a chicken is found, kill it using the `killMob` function. Finally, send a chat message indicating that one chicken has been killed.\n}"}, "craftIronChestplate": {"code": "async function craftIronChestplate(bot) {\n  // Check if the bot has a crafting table in the inventory\n  const craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n\n  // If not, craft a crafting table using the existing dark_oak_planks\n  if (!craftingTable) {\n    await craftItem(bot, \"crafting_table\", 1);\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Check if the bot has enough iron ingots in the inventory\n  const requiredIronIngots = 8;\n  const currentIronIngots = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n\n  // If not, mine iron ore and smelt it into iron ingots\n  if (currentIronIngots < requiredIronIngots) {\n    const ironOre = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n      const iron_ore = bot.findBlock({\n        matching: mcData.blocksByName[\"iron_ore\"].id,\n        maxDistance: 32\n      });\n      return iron_ore;\n    });\n    await mineBlock(bot, \"iron_ore\", requiredIronIngots - currentIronIngots);\n    await smeltItem(bot, \"iron_ore\", \"coal\", requiredIronIngots - currentIronIngots);\n  }\n\n  // Craft an iron chestplate using the crafting table\n  await craftItem(bot, \"iron_chestplate\", 1);\n  bot.chat(\"Crafted an iron chestplate.\");\n}", "description": "async function craftIronChestplate(bot) {\n    // The function crafts an iron chestplate using a crafting table and iron ingots. If the bot does not have a crafting table in the inventory, it crafts one using dark oak planks and places it near the bot. If the bot does not have enough iron ingots, it explores the environment until it finds iron ore, mines it, and smelts it into iron ingots. Finally, it crafts an iron chestplate using the crafting table and saves the event of crafting the chestplate.\n}"}, "equipIronChestplate": {"code": "async function equipIronChestplate(bot) {\n  // Find the iron chestplate in the bot's inventory\n  const ironChestplate = bot.inventory.findInventoryItem(mcData.itemsByName.iron_chestplate.id);\n\n  // Equip the iron chestplate in the chestplate slot\n  await bot.equip(ironChestplate, \"torso\");\n  bot.chat(\"Equipped the iron chestplate.\");\n}", "description": "async function equipIronChestplate(bot) {\n    // The function is about equipping an iron chestplate in the chestplate slot of the bot's armor. It first finds the iron chestplate in the bot's inventory and then equips it in the chestplate slot using the `bot.equip` function. Finally, it sends a chat message indicating that the iron chestplate has been equipped.\n}"}, "mineCopperOres": {"code": "async function mineCopperOres(bot) {\n  // Equip the stone_pickaxe\n  await bot.equip(mcData.itemsByName.stone_pickaxe.id, \"hand\");\n\n  // Explore until finding a copper_ore\n  await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const copper_ore = bot.findBlock({\n      matching: mcData.blocksByName[\"copper_ore\"].id,\n      maxDistance: 32\n    });\n    return copper_ore;\n  });\n\n  // Mine 5 copper ores\n  await mineBlock(bot, \"copper_ore\", 5);\n  bot.chat(\"Mined 5 copper ores.\");\n}", "description": "async function mineCopperOres(bot) {\n    // The function is about mining 5 copper ores using a stone pickaxe. The function equips the stone pickaxe in the hand and explores the environment until finding a copper ore block. Once a copper ore block is found, mine a total of 5 copper ores using the stone pickaxe. Finally, the function sends a chat message indicating that 5 copper ores have been mined.\n}"}, "mineFiveIronOre": {"code": "async function mineFiveIronOre(bot) {\n  // Equip the iron_pickaxe\n  await bot.equip(mcData.itemsByName.iron_pickaxe.id, \"hand\");\n  let ironOreCount = 0;\n  while (ironOreCount < 5) {\n    // Explore until finding an iron_ore\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const iron_ore = bot.findBlock({\n        matching: mcData.blocksByName[\"iron_ore\"].id,\n        maxDistance: 32\n      });\n      return iron_ore;\n    });\n\n    // Mine iron ores\n    const initialIronOreCount = bot.inventory.count(mcData.itemsByName.raw_iron.id);\n    await mineBlock(bot, \"iron_ore\", 5 - ironOreCount);\n    const finalIronOreCount = bot.inventory.count(mcData.itemsByName.raw_iron.id);\n    ironOreCount += finalIronOreCount - initialIronOreCount;\n  }\n  bot.chat(\"Mined 5 iron ores.\");\n}", "description": "async function mineFiveIronOre(bot) {\n    // The function is about mining 5 iron ores using an iron pickaxe. The function equips the iron pickaxe in the hand and explores the environment until finding 5 iron ores. Once an iron ore is found, the bot mines it and adds it to the inventory. The function stops mining once it has mined 5 iron ores and sends a chat message indicating that it has mined 5 iron ores.\n}"}, "placeChest": {"code": "async function placeChest(bot) {\n  // Find a suitable position near the bot to place the chest\n  const offsets = [new Vec3(1, 0, 0), new Vec3(-1, 0, 0), new Vec3(0, 0, 1), new Vec3(0, 0, -1)];\n  let chestPosition = null;\n  for (const offset of offsets) {\n    const position = bot.entity.position.offset(offset.x, offset.y, offset.z);\n    const block = bot.blockAt(position);\n    if (block.name === \"air\") {\n      chestPosition = position;\n      break;\n    }\n  }\n  if (chestPosition) {\n    // Place the chest at the selected position\n    await placeItem(bot, \"chest\", chestPosition);\n    bot.chat(\"Placed a chest.\");\n  } else {\n    bot.chat(\"Cannot place a chest. No suitable position found.\");\n  }\n}", "description": "async function placeChest(bot) {\n    // The function is about finding a suitable position near the bot to place a chest and placing it there. It searches for a block of air in the vicinity of the bot and places the chest there. If a suitable position is found, the chest is placed and a message is sent to the chat. If no suitable position is found, a message is sent to the chat indicating that a chest cannot be placed.\n}"}, "killCaveSpiderWithAvailableSword": {"code": "async function killCaveSpiderWithAvailableSword(bot) {\n  // Equip the best available sword (iron > stone > wooden)\n  const ironSword = bot.inventory.findInventoryItem(mcData.itemsByName.iron_sword.id);\n  const stoneSword = bot.inventory.findInventoryItem(mcData.itemsByName.stone_sword.id);\n  const woodenSword = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_sword.id);\n  if (ironSword) {\n    await bot.equip(ironSword, \"hand\");\n  } else if (stoneSword) {\n    await bot.equip(stoneSword, \"hand\");\n  } else if (woodenSword) {\n    await bot.equip(woodenSword, \"hand\");\n  } else {\n    bot.chat(\"No sword available to kill the cave spider.\");\n    return;\n  }\n\n  // Find the nearest cave spider using exploreUntil\n  const caveSpider = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const caveSpider = bot.nearestEntity(entity => {\n      return entity.name === \"cave_spider\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    return caveSpider;\n  });\n\n  // Kill the cave spider using killMob function\n  await killMob(bot, caveSpider.name, 300);\n  bot.chat(\"Killed 1 cave spider.\");\n}", "description": "async function killCaveSpiderWithAvailableSword(bot) {\n    // The function is about killing a cave spider with the best available sword (iron > stone > wooden). First, it equips the best available sword in the inventory. Then, it finds the nearest cave spider using `exploreUntil` function. Finally, it kills the cave spider using `killMob` function and saves the event of killing the cave spider.\n}"}, "eatCookedBeef": {"code": "async function eatCookedBeef(bot) {\n  // Equip the cooked beef in the bot's hand\n  const cookedBeef = bot.inventory.findInventoryItem(mcData.itemsByName.cooked_beef.id);\n  await bot.equip(cookedBeef, \"hand\");\n\n  // Consume the cooked beef\n  await bot.consume();\n  bot.chat(\"Ate 1 cooked beef.\");\n}", "description": "async function eatCookedBeef(bot) {\n    // The function equips a cooked beef in the bot's hand and consumes it, then sends a chat message indicating that the bot ate 1 cooked beef.\n}"}, "killOnePig": {"code": "async function killOnePig(bot) {\n  // Equip the stone_sword\n  const stoneSword = bot.inventory.findInventoryItem(mcData.itemsByName.stone_sword.id);\n  await bot.equip(stoneSword, \"hand\");\n\n  // Find the nearest pig using exploreUntil\n  const pig = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const pig = bot.nearestEntity(entity => {\n      return entity.name === \"pig\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    return pig;\n  });\n\n  // Kill the pig using killMob function\n  await killMob(bot, pig.name, 300);\n  bot.chat(\"Killed 1 pig.\");\n}", "description": "async function killOnePig(bot) {\n    // The function is about killing one pig using a stone sword. First, equip the stone sword in the hand. Next, explore the environment until finding the nearest pig within 32 blocks. Once a pig is found, kill it using the `killMob` function. Finally, send a chat message indicating that one pig has been killed.\n}"}, "craftIronHelmet": {"code": "async function craftIronHelmet(bot) {\n  // Check if the bot has a crafting table in the inventory\n  const craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n\n  // If not, craft a crafting table using the existing dark_oak_planks\n  if (!craftingTable) {\n    await craftItem(bot, \"crafting_table\", 1);\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Check if the bot has enough iron ingots in the inventory\n  const requiredIronIngots = 5;\n  const currentIronIngots = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n\n  // If not, mine iron ore and smelt it into iron ingots\n  if (currentIronIngots < requiredIronIngots) {\n    const ironOre = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n      const iron_ore = bot.findBlock({\n        matching: mcData.blocksByName[\"iron_ore\"].id,\n        maxDistance: 32\n      });\n      return iron_ore;\n    });\n    await mineBlock(bot, \"iron_ore\", requiredIronIngots - currentIronIngots);\n    await smeltItem(bot, \"iron_ore\", \"coal\", requiredIronIngots - currentIronIngots);\n  }\n\n  // Craft an iron helmet using the crafting table\n  await craftItem(bot, \"iron_helmet\", 1);\n  bot.chat(\"Crafted an iron helmet.\");\n}", "description": "async function craftIronHelmet(bot) {\n    // The function crafts an iron helmet using a crafting table and iron ingots. If the bot does not have a crafting table in the inventory, it crafts one using dark oak planks and places it near the bot. If the bot does not have enough iron ingots, it explores the environment until it finds iron ore, mines it, and smelts it into iron ingots. Finally, it crafts an iron helmet using the crafting table and saves the event of crafting the helmet.\n}"}, "findAndSmeltIronOre": {"code": "async function findAndSmeltIronOre(bot) {\n  // Find and mine 10 iron ore\n  for (let i = 0; i < 10; i++) {\n    const ironOre = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const iron_ore = bot.findBlock({\n        matching: mcData.blocksByName[\"iron_ore\"].id,\n        maxDistance: 32\n      });\n      return iron_ore;\n    });\n    await mineBlock(bot, \"iron_ore\", 1);\n  }\n  bot.chat(\"Mined 10 iron ore.\");\n\n  // Find a suitable block to place the furnace on\n  const suitableBlock = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const offsets = [new Vec3(1, 0, 0), new Vec3(-1, 0, 0), new Vec3(0, 0, 1), new Vec3(0, 0, -1)];\n    for (const offset of offsets) {\n      const block = bot.blockAt(bot.entity.position.plus(offset));\n      if (block && block.name !== \"air\" && block.name !== \"grass\") {\n        return block;\n      }\n    }\n    return null;\n  });\n\n  // Place the furnace on the suitable block\n  await placeItem(bot, \"furnace\", suitableBlock.position.offset(0, 1, 0));\n\n  // Smelt the 10 iron ore in the furnace using coal as fuel\n  await smeltItem(bot, \"iron_ore\", \"coal\", 10);\n  bot.chat(\"Smelted 10 iron ore in the furnace.\");\n}", "description": "async function findAndSmeltIronOre(bot) {\n    // The function is about finding and smelting 10 iron ore. It first explores the environment until it finds 10 iron ore blocks and mines them. Then it looks for a suitable block to place the furnace on and places the furnace on it. Finally, it smelts the 10 iron ore in the furnace using coal as fuel and outputs a message indicating that the smelting process is complete.\n}"}, "smeltFiveCopper": {"code": "async function smeltFiveCopper(bot) {\n  // Check if the bot has 5 raw_copper in the inventory\n  const rawCopperCount = bot.inventory.count(mcData.itemsByName.raw_copper.id);\n\n  // If not, mine copper ores until there are 5 raw_copper in the inventory\n  if (rawCopperCount < 5) {\n    await mineBlock(bot, \"copper_ore\", 5 - rawCopperCount);\n    bot.chat(\"Mined enough copper ores to smelt 5 copper ingots.\");\n  }\n\n  // Find a suitable block to place the furnace on\n  const suitableBlock = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const offsets = [new Vec3(1, 0, 0), new Vec3(-1, 0, 0), new Vec3(0, 0, 1), new Vec3(0, 0, -1)];\n    for (const offset of offsets) {\n      const block = bot.blockAt(bot.entity.position.plus(offset));\n      if (block && block.name !== \"air\" && block.name !== \"grass\") {\n        return block;\n      }\n    }\n    return null;\n  });\n\n  // Place the furnace on the suitable block\n  await placeItem(bot, \"furnace\", suitableBlock.position.offset(0, 1, 0));\n\n  // Smelt the 5 raw_copper in the furnace using coal as fuel\n  await smeltItem(bot, \"raw_copper\", \"coal\", 5);\n  bot.chat(\"Smelted 5 copper ingots in the furnace.\");\n}", "description": "async function smeltFiveCopper(bot) {\n    // The function is about smelting 5 copper ingots using a furnace and coal as fuel. First, check if the bot has 5 raw_copper in the inventory. If not, mine copper ores until there are 5 raw_copper in the inventory. Then, find a suitable block to place the furnace on and place the furnace on it. Finally, smelt the 5 raw_copper in the furnace using coal as fuel.\n}"}, "mineLapisOres": {"code": "async function mineLapisOres(bot) {\n  // Check if the bot has a stone_pickaxe or better in the inventory\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n\n  // If not, call the craftStonePickaxe function to craft a stone pickaxe\n  if (!stonePickaxe && !ironPickaxe) {\n    await craftItem(bot, \"stone_pickaxe\", 1);\n  }\n\n  // Equip the stone_pickaxe or better pickaxe\n  if (ironPickaxe) {\n    await bot.equip(mcData.itemsByName.iron_pickaxe.id, \"hand\");\n  } else {\n    await bot.equip(mcData.itemsByName.stone_pickaxe.id, \"hand\");\n  }\n\n  // Explore until finding a lapis_ore\n  await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const lapis_ore = bot.findBlock({\n      matching: mcData.blocksByName[\"lapis_ore\"].id,\n      maxDistance: 32\n    });\n    return lapis_ore;\n  });\n\n  // Mine 5 lapis ores\n  await mineBlock(bot, \"lapis_ore\", 5);\n  bot.chat(\"Mined 5 lapis ores.\");\n}", "description": "async function mineLapisOres(bot) {\n    // The function is about mining 5 lapis ores using a stone pickaxe or better. First, check if the bot has a stone_pickaxe or better in the inventory. If not, call the craftStonePickaxe function to craft a stone pickaxe. Equip the stone_pickaxe or better pickaxe. Next, explore the environment until finding a lapis_ore. Once a lapis_ore is found, mine a total of 5 lapis ores using the pickaxe. Finally, the bot will chat that it has mined 5 lapis ores.\n}"}, "placeChestInOpenArea": {"code": "async function placeChestInOpenArea(bot) {\n  // Check if there is a chest in the bot's inventory\n  const chest = bot.inventory.findInventoryItem(mcData.itemsByName.chest.id);\n  if (!chest) {\n    bot.chat(\"No chest in inventory.\");\n    return;\n  }\n\n  // Try to place the chest at a suitable position near the bot\n  const offsets = [new Vec3(1, 0, 0), new Vec3(-1, 0, 0), new Vec3(0, 0, 1), new Vec3(0, 0, -1)];\n  let chestPosition = null;\n  for (const offset of offsets) {\n    const position = bot.entity.position.offset(offset.x, offset.y, offset.z);\n    const block = bot.blockAt(position);\n    if (block.name === \"air\") {\n      chestPosition = position;\n      break;\n    }\n  }\n\n  // If the bot cannot find a suitable position, move to a more open area and try again\n  if (!chestPosition) {\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      for (const offset of offsets) {\n        const position = bot.entity.position.offset(offset.x, offset.y, offset.z);\n        const block = bot.blockAt(position);\n        if (block.name === \"air\") {\n          chestPosition = position;\n          return true;\n        }\n      }\n      return false;\n    });\n  }\n\n  // Place the chest at the selected position\n  if (chestPosition) {\n    await placeItem(bot, \"chest\", chestPosition);\n    bot.chat(\"Placed a chest.\");\n  } else {\n    bot.chat(\"Cannot place a chest. No suitable position found.\");\n  }\n}", "description": "async function placeChestInOpenArea(bot) {\n    // The function is about placing a chest in an open area near the bot. It first checks if there is a chest in the bot's inventory. Then, it tries to find a suitable position for the chest by checking nearby blocks. If it cannot find a suitable position, it moves to a more open area and tries again. Finally, it places the chest at the selected position.\n}"}, "craftIronLeggings": {"code": "async function findSuitablePosition(bot) {\n  const offsets = [new Vec3(1, 0, 0), new Vec3(-1, 0, 0), new Vec3(0, 0, 1), new Vec3(0, 0, -1)];\n  for (const offset of offsets) {\n    const position = bot.entity.position.offset(offset.x, offset.y, offset.z);\n    const block = bot.blockAt(position);\n    if (block.name === \"air\") {\n      return position;\n    }\n  }\n  return bot.entity.position;\n}\n\nasync function craftIronLeggings(bot) {\n  // Check if the bot has enough iron ingots in the inventory\n  const requiredIronIngots = 7;\n  const currentIronIngots = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n\n  // If not, mine iron ore and smelt it into iron ingots\n  if (currentIronIngots < requiredIronIngots) {\n    const ironOre = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n      const iron_ore = bot.findBlock({\n        matching: mcData.blocksByName[\"iron_ore\"].id,\n        maxDistance: 32\n      });\n      return iron_ore;\n    });\n    await mineBlock(bot, \"iron_ore\", requiredIronIngots - currentIronIngots);\n    await smeltItem(bot, \"iron_ore\", \"coal\", requiredIronIngots - currentIronIngots);\n  }\n\n  // Check if the bot has a crafting table in the inventory\n  const craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n\n  // If not, mine a dark_oak_log, craft dark_oak_planks, and then craft a crafting table\n  if (!craftingTable) {\n    await mineBlock(bot, \"dark_oak_log\", 1);\n    await craftItem(bot, \"dark_oak_planks\", 1);\n    await craftItem(bot, \"crafting_table\", 1);\n  }\n\n  // Find a suitable position to place the crafting table\n  const craftingTablePosition = await findSuitablePosition(bot);\n\n  // Place the crafting table at the suitable position\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft iron leggings using the crafting table\n  await craftItem(bot, \"iron_leggings\", 1);\n  bot.chat(\"Crafted iron leggings.\");\n}", "description": "async function craftIronLeggings(bot) {\n    // The function is about crafting iron leggings. If the bot does not have enough iron ingots, it will mine iron ore and smelt it into iron ingots. If the bot does not have a crafting table, it will mine a dark oak log, craft dark oak planks, and then craft a crafting table. It will then find a suitable position to place the crafting table and place it there. Finally, it will craft iron leggings using the crafting table.\n}"}, "cookPorkchops": {"code": "async function findSuitableSolidBlock(bot) {\n  return await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const offsets = [new Vec3(1, 0, 0), new Vec3(-1, 0, 0), new Vec3(0, 0, 1), new Vec3(0, 0, -1)];\n    for (const offset of offsets) {\n      const block = bot.blockAt(bot.entity.position.plus(offset));\n      if (block && block.name !== \"air\" && block.name !== \"grass\" && block.name !== \"tall_grass\" && block.name !== \"water\") {\n        return block;\n      }\n    }\n    return null;\n  });\n}\n\nasync function cookPorkchops(bot) {\n  // Find a suitable solid block to place the furnace on\n  const suitableBlock = await findSuitableSolidBlock(bot);\n\n  // Place the furnace on the suitable solid block\n  await placeItem(bot, \"furnace\", suitableBlock.position.offset(0, 1, 0));\n\n  // Cook the 2 porkchops in the furnace using coal as fuel\n  await smeltItem(bot, \"porkchop\", \"coal\", 2);\n  bot.chat(\"Cooked 2 porkchops in the furnace.\");\n}", "description": "async function cookPorkchops(bot) {\n    // The function is about cooking 2 porkchops in a furnace using coal as fuel. It first finds a suitable solid block to place the furnace on by exploring the environment. Then, it places the furnace on the suitable solid block. Finally, it cooks the porkchops in the furnace using coal as fuel and saves the event of cooking porkchops.\n}"}, "killSheepAndCollectWool": {"code": "async function killSheepAndCollectWool(bot) {\n  // Equip the iron_sword\n  const ironSword = bot.inventory.findInventoryItem(mcData.itemsByName.iron_sword.id);\n  await bot.equip(ironSword, \"hand\");\n\n  // Find the nearest sheep using exploreUntil\n  const sheep = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const sheep = bot.nearestEntity(entity => {\n      return entity.name === \"sheep\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    return sheep;\n  });\n\n  // Kill the sheep using killMob function\n  await killMob(bot, sheep.name, 300);\n\n  // Collect the dropped wool\n  await bot.pathfinder.goto(new GoalBlock(sheep.position.x, sheep.position.y, sheep.position.z));\n  bot.chat(\"Killed 1 sheep and collected wool.\");\n}", "description": "async function killSheepAndCollectWool(bot) {\n    // The function is about killing the nearest sheep and collecting its wool. It equips the iron sword, finds the nearest sheep using `exploreUntil`, kills the sheep using `killMob` function, and collects the dropped wool by moving to the sheep's position using `bot.pathfinder.goto`.\n}"}, "craftIronBoots": {"code": "async function craftIronBoots(bot) {\n  // Check if the bot has enough iron ingots in the inventory\n  const requiredIronIngots = 4;\n  const currentIronIngots = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n\n  // If not, mine iron ore and smelt it into iron ingots\n  if (currentIronIngots < requiredIronIngots) {\n    const ironOre = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n      const iron_ore = bot.findBlock({\n        matching: mcData.blocksByName[\"iron_ore\"].id,\n        maxDistance: 32\n      });\n      return iron_ore;\n    });\n    await mineBlock(bot, \"iron_ore\", requiredIronIngots - currentIronIngots);\n    await smeltItem(bot, \"iron_ore\", \"coal\", requiredIronIngots - currentIronIngots);\n  }\n\n  // Check if the bot has a crafting table in the inventory\n  const craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n\n  // If not, mine a dark_oak_log, craft dark_oak_planks, and then craft a crafting table\n  if (!craftingTable) {\n    await mineBlock(bot, \"dark_oak_log\", 1);\n    await craftItem(bot, \"dark_oak_planks\", 1);\n    await craftItem(bot, \"crafting_table\", 1);\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft iron boots using the crafting table\n  await craftItem(bot, \"iron_boots\", 1);\n  bot.chat(\"Crafted iron boots.\");\n}", "description": "async function craftIronBoots(bot) {\n    // The function crafts a pair of iron boots. It first checks if the bot has enough iron ingots in the inventory, and if not, it mines iron ore and smelts it into iron ingots. Then it checks if the bot has a crafting table in the inventory, and if not, it mines a dark oak log, crafts dark oak planks, and then crafts a crafting table. After placing the crafting table near the bot, it crafts iron boots using the crafting table.\n}"}, "eatCookedPorkchop": {"code": "async function eatCookedPorkchop(bot) {\n  if (bot.food < 20) {\n    // Equip the cooked_porkchop in the bot's hand\n    const cookedPorkchop = bot.inventory.findInventoryItem(mcData.itemsByName.cooked_porkchop.id);\n    await bot.equip(cookedPorkchop, \"hand\");\n\n    // Consume the cooked_porkchop\n    await bot.consume();\n    bot.chat(\"Ate 1 cooked porkchop.\");\n  } else {\n    bot.chat(\"Hunger is full, no need to eat a cooked porkchop.\");\n  }\n}", "description": "async function eatCookedPorkchop(bot) {\n    // The function is about eating a cooked porkchop if the bot's hunger is less than 20. If the cooked porkchop is available in the inventory, it is equipped in the bot's hand and consumed. If the bot's hunger is already full, the function will not eat the cooked porkchop.\n}"}, "openChestAndCheckContents": {"code": "async function openChestAndCheckContents(bot) {\n  const chestPosition = new Vec3(789, 67, 642);\n  await moveToChest(bot, chestPosition);\n  await checkItemInsideChest(bot, chestPosition);\n  bot.chat(\"Checked the chest at (789, 67, 642).\");\n}", "description": "async function openChestAndCheckContents(bot) {\n    // The function is about opening a chest at a specific position and checking its contents. It first moves the bot to the chest's position using `moveToChest` helper function. Then, it checks the items inside the chest using `checkItemInsideChest` helper function. Finally, it sends a chat message indicating that the chest has been checked.\n}"}, "equipIronLeggings": {"code": "async function equipIronLeggings(bot) {\n  // Find the iron_leggings in the bot's inventory\n  const ironLeggings = bot.inventory.findInventoryItem(mcData.itemsByName.iron_leggings.id);\n\n  // Equip the iron_leggings in the legs armor slot\n  await bot.equip(ironLeggings, \"legs\");\n  bot.chat(\"Equipped the iron leggings.\");\n}", "description": "async function equipIronLeggings(bot) {\n    // The function equips the iron leggings in the legs armor slot if it is available in the bot's inventory.\n}"}, "craftAndEquipIronArmor": {"code": "async function craftAndEquipIronArmor(bot) {\n  // Place a crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft iron boots using the crafting table\n  await craftItem(bot, \"iron_boots\", 1);\n\n  // Craft an iron helmet using the crafting table\n  await craftItem(bot, \"iron_helmet\", 1);\n\n  // Equip the iron boots and iron helmet\n  const ironBoots = bot.inventory.findInventoryItem(mcData.itemsByName.iron_boots.id);\n  const ironHelmet = bot.inventory.findInventoryItem(mcData.itemsByName.iron_helmet.id);\n  await bot.equip(ironBoots, \"feet\");\n  await bot.equip(ironHelmet, \"head\");\n  bot.chat(\"Crafted and equipped iron boots and an iron helmet.\");\n}", "description": "async function craftAndEquipIronArmor(bot) {\n    // The function crafts and equips iron boots and an iron helmet. It places a crafting table near the bot, crafts the items using the table, finds the items in the inventory, and equips them on the bot's feet and head. Finally, it sends a chat message indicating that the items have been crafted and equipped.\n}"}, "smeltRawCopper": {"code": "async function smeltRawCopper(bot) {\n  // Check if there is a furnace in the inventory\n  const furnace = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n\n  // If there is no furnace, craft one using the cobblestone in the inventory\n  if (!furnace) {\n    await craftItem(bot, \"furnace\", 1);\n    bot.chat(\"Crafted a furnace.\");\n  }\n\n  // Find a suitable block to place the furnace on\n  const suitableBlock = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const offsets = [new Vec3(1, 0, 0), new Vec3(-1, 0, 0), new Vec3(0, 0, 1), new Vec3(0, 0, -1)];\n    for (const offset of offsets) {\n      const block = bot.blockAt(bot.entity.position.plus(offset));\n      if (block && block.name !== \"air\" && block.name !== \"grass\") {\n        return block;\n      }\n    }\n    return null;\n  });\n\n  // Place the furnace on the suitable block\n  await placeItem(bot, \"furnace\", suitableBlock.position.offset(0, 1, 0));\n\n  // Smelt the 11 raw copper in the furnace using coal as fuel\n  await smeltItem(bot, \"raw_copper\", \"coal\", 11);\n  bot.chat(\"Smelted 11 raw copper in the furnace.\");\n}", "description": "async function smeltRawCopper(bot) {\n    // The function is about smelting 11 raw copper using a furnace and coal as fuel. First, it checks if there is a furnace in the inventory. If not, it crafts one using cobblestone. Then, it explores the environment to find a suitable block to place the furnace on. Once a suitable block is found, it places the furnace on it. Finally, it smelts 11 raw copper in the furnace using coal as fuel and saves the event of smelting 11 raw copper.\n}"}, "obtainWoodLogs": {"code": "async function obtainWoodLogs(bot) {\n  const requiredLogs = 2;\n  const currentLogs = bot.inventory.count(mcData.itemsByName.oak_log.id);\n  if (currentLogs >= requiredLogs) {\n    bot.chat(\"Already have enough oak logs.\");\n  } else {\n    const oakLog = bot.findBlock({\n      matching: mcData.blocksByName.oak_log.id,\n      maxDistance: 32\n    });\n    if (oakLog) {\n      await mineBlock(bot, \"oak_log\", requiredLogs);\n      bot.chat(\"Mined 2 oak logs.\");\n    } else {\n      const foundOakLog = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n        const oakLog = bot.findBlock({\n          matching: mcData.blocksByName.oak_log.id,\n          maxDistance: 32\n        });\n        return oakLog;\n      });\n      if (foundOakLog) {\n        await mineBlock(bot, \"oak_log\", requiredLogs);\n        bot.chat(\"Mined 2 oak logs.\");\n      } else {\n        bot.chat(\"Could not find any oak logs.\");\n      }\n    }\n  }\n}", "description": "async function obtainWoodLogs(bot) {\n    // The function is about obtaining 2 oak logs. It checks if there are already enough oak logs in the inventory, and if so, it does nothing. If not, it looks for oak logs within a certain distance. If it finds oak logs, it mines 2 of them. If it doesn't find any oak logs, it explores the environment until it finds some, and then mines 2 of them. If it still can't find any oak logs, it reports that it couldn't find any.\n}"}, "craftIronAxe": {"code": "async function craftIronAxe(bot) {\n  // Check if we have enough iron ingots and sticks in the inventory\n  const requiredIronIngots = 3;\n  const requiredSticks = 2;\n  const currentIronIngots = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const currentSticks = bot.inventory.count(mcData.itemsByName.stick.id);\n\n  // If not, mine iron ore and smelt it into iron ingots, and craft sticks as needed\n  if (currentIronIngots < requiredIronIngots) {\n    const ironOre = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n      const iron_ore = bot.findBlock({\n        matching: mcData.blocksByName[\"iron_ore\"].id,\n        maxDistance: 32\n      });\n      return iron_ore;\n    });\n    await mineBlock(bot, \"iron_ore\", requiredIronIngots - currentIronIngots);\n    await smeltItem(bot, \"iron_ore\", \"coal\", requiredIronIngots - currentIronIngots);\n  }\n  if (currentSticks < requiredSticks) {\n    const planksNeeded = Math.ceil((requiredSticks - currentSticks) / 4);\n    await mineBlock(bot, \"oak_log\", planksNeeded);\n    await craftItem(bot, \"oak_planks\", planksNeeded);\n    await craftItem(bot, \"stick\", planksNeeded);\n  }\n\n  // Check if we have a crafting table in the inventory\n  const craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n\n  // If not, craft one\n  if (!craftingTable) {\n    await mineBlock(bot, \"oak_log\", 1);\n    await craftItem(bot, \"oak_planks\", 1);\n    await craftItem(bot, \"crafting_table\", 1);\n  }\n\n  // Find a suitable block to place the crafting table on (not leaves)\n  const suitableBlock = bot.findBlock({\n    matching: block => {\n      return block.name !== \"air\" && block.name !== \"leaves\";\n    },\n    maxDistance: 32\n  });\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = suitableBlock.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft an iron axe using the crafting table with 3 iron ingots and 2 sticks\n  await craftItem(bot, \"iron_axe\", 1);\n  bot.chat(\"Crafted an iron axe.\");\n}", "description": "async function craftIronAxe(bot) {\n    // The function crafts an iron axe using 3 iron ingots and 2 sticks. If the required items are not in the inventory, the bot mines iron ore and smelts it into iron ingots, and crafts sticks as needed. If there is no crafting table in the inventory, the bot crafts one and places it on a suitable block. Finally, the bot crafts an iron axe using the crafting table and the required items.\n}"}}